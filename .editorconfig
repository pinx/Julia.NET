###############################
# Core EditorConfig Options   #
###############################

root = true

# All files
[*]
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.{arch,bbdef,catref,nsdep,nscat,catrule}]
indent_size = 2
charset = utf-8

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
charset = utf-8-bom

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,msbuild,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

###############################
# .NET Coding Conventions     #
###############################

[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:silent
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

###############################
# Naming Conventions          #
###############################

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.pascal_case_from_i_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_from_i_style.required_prefix = I

dotnet_naming_style.pascal_case_from_t_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_from_t_style.required_prefix = T

dotnet_naming_style.pascal_case_from_m_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_from_m_style.required_prefix = m_

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Use PascalCase for types and namespaces
dotnet_naming_rule.types_and_namespaces_rule.severity = warning
dotnet_naming_rule.types_and_namespaces_rule.symbols = types_and_namespace_symbols
dotnet_naming_rule.types_and_namespaces_rule.style = pascal_case_style
dotnet_naming_symbols.types_and_namespace_symbols.applicable_kinds = namespace, class, struct, enum
dotnet_naming_symbols.types_and_namespace_symbols.applicable_accessibilities = *

# Use IPascalCase for interfaces
dotnet_naming_rule.interfaces_rule.severity = warning
dotnet_naming_rule.interfaces_rule.symbols = interface_symbols
dotnet_naming_rule.interfaces_rule.style = pascal_case_from_i_style
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

# Use TGenericParam for generic parameters
dotnet_naming_rule.type_parameters_rule.severity = warning
dotnet_naming_rule.type_parameters_rule.symbols = type_parameters_symbols
dotnet_naming_rule.type_parameters_rule.style = pascal_case_from_t_style
dotnet_naming_symbols.type_parameters_symbols.applicable_kinds = type_parameter

# Use PascalCase
dotnet_naming_rule.other_type_members_rule.severity = warning
dotnet_naming_rule.other_type_members_rule.symbols = other_type_members_symbols
dotnet_naming_rule.other_type_members_rule.style = pascal_case_style
dotnet_naming_symbols.other_type_members_symbols.applicable_kinds = method, property, event, delegate, local_function
dotnet_naming_symbols.other_type_members_symbols.applicable_accessibilities = *

# Use camelCase for parameters and local variables
dotnet_naming_rule.camel_case_members_rule.severity = warning
dotnet_naming_rule.camel_case_members_rule.symbols = params_and_vars_symbols
dotnet_naming_rule.camel_case_members_rule.style = camel_case_style
dotnet_naming_symbols.params_and_vars_symbols.applicable_kinds = parameter, local
dotnet_naming_symbols.params_and_vars_symbols.applicable_accessibilities = *

# Use PascalCase for constants
dotnet_naming_rule.types_and_namespaces_rule.severity = warning
dotnet_naming_rule.types_and_namespaces_rule.symbols = constants_symbols
dotnet_naming_rule.types_and_namespaces_rule.style = pascal_case_style
dotnet_naming_symbols.constants_symbols.applicable_kinds = field
dotnet_naming_symbols.constants_symbols.applicable_accessibilities = *
dotnet_naming_symbols.constants_symbols.required_modifiers = const

# Use PascalCase for static field
dotnet_naming_rule.static_fields_rule.severity = warning
dotnet_naming_rule.static_fields_rule.symbols = static_fields_symbols
dotnet_naming_rule.static_fields_rule.style = pascal_case_style
dotnet_naming_symbols.static_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.static_fields_symbols.applicable_accessibilities = *
dotnet_naming_symbols.static_fields_symbols.required_modifiers = static

# Use PascalCase for non-private instance fields
dotnet_naming_rule.instance_fields_rule.severity = warning
dotnet_naming_rule.instance_fields_rule.symbols = instance_fields_symbols
dotnet_naming_rule.instance_fields_rule.style = pascal_case_style
dotnet_naming_symbols.instance_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.instance_fields_symbols.applicable_accessibilities = public, internal, protected, protected_internal, private_protected

# Use m_PascalCase for private instance fields
dotnet_naming_rule.instance_fields_rule.severity = warning
dotnet_naming_rule.instance_fields_rule.symbols = instance_fields_symbols
dotnet_naming_rule.instance_fields_rule.style = pascal_case_from_m_style
dotnet_naming_symbols.instance_fields_symbols.applicable_kinds = field
dotnet_naming_symbols.instance_fields_symbols.applicable_accessibilities = private

###############################
# C# Code Style Rules         #
###############################

[*.cs]
# var preferences
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true:silent

# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:silent
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_after_comma = true
csharp_space_after_dot = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

##################################
# Visual Basic Code Style Rules  #
##################################

[*.vb]
# Modifier preferences
visual_basic_preferred_modifier_order = Partial, Default, Private, Protected, Public, Friend, NotOverridable, Overridable, MustOverride, Overloads, Overrides, MustInherit, NotInheritable, Static, Shared, Shadows, ReadOnly, WriteOnly, Dim, Const, WithEvents, Widening, Narrowing, Custom, Async:suggestion

